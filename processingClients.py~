#!/usr/bin/python

from threading import Thread
from math import*
import _thread
import time
import concurrent.futures
import subprocess
import queue
from subprocess import Popen, PIPE
import sys
from multiprocessing import Process, Queue, dummy as multithreading
from multiprocessing.dummy import Pool as ThreadPool

class processingClients():
	macHash = {}	
	def readingData(self):
		process = Popen("ncat -l -k 9999", stdout = PIPE, shell = True)
		macAdd = []

		while True:
			macAdd = []
			line = process.stdout.readline()
			print(line)
	
			for i in range(2, 19):
				macAdd.append(line[i])
			macAddStr = ''.join(str(e) for e in macAdd)
#				print(macAddStr)

			if macAddStr not in processingClients.macHash:
				processingClients.macHash[macAddStr] = []
#				print(macAddStr)
				thread = Thread( target = self.status, args=[macAddStr])
				thread.start()
				#thread.close()
				#print("thread name is: " + str(thread))
				thread.join()
#					pool.submit(self.status(macAddStr))
				#	pool.close()
				#	pool.join()

	def status(self, macAddStr):
		timer = 0
		meanVal = 0
		variance = 0
                print(macAddStr)
		while timer < 10:
			time.sleep(1)
			print("yellow")
			global timer
			timer += 1






if __name__ == "__main__":
    processingClients().readingData()
